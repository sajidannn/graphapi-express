// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LogEntry {
  id           String        @id @default(uuid())
  timestamp    DateTime      @default(now())
  level        String
  code_ref     String
  message      String
  log_Metadata LogMetadata[]
}

model LogMetadata {
  id    String @id @default(uuid())
  logId String
  key   String
  value String

  logEntry LogEntry @relation(fields: [logId], references: [id], onDelete: Cascade)

  @@index([logId])
}

model InstagramToken {
  token       String   @id
  tokenType   String
  expiresIn   Int
  permissions String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

model Conversation {
  id          String     @id @default(uuid())
  userId      String     @unique
  username    String
  lastMessage String?
  readStatus  ReadStatus @default(unread)
  lastDate    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  messages Message[]
}

model Message {
  id             String     @id @default(uuid())
  conversationId String
  senderType     String
  content        String?
  readStatus     ReadStatus @default(unread)
  sentAt         DateTime
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  conversation Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  attachments  MessageAttachment[]
}

model MessageAttachment {
  id        String   @id @default(uuid())
  messageId String
  fileUrl   String
  fileType  String?
  fileOrder Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

enum ReadStatus {
  unread
  read
}
